package goog.net;
import js.Dom;
private typedef Object = Dynamic;
private typedef Node = Dom;
private typedef Element = HtmlDom;
private typedef HTMLIFrameElement = IFrame;
private typedef Selection = Dynamic;
private typedef Range = Dynamic;
private typedef HTMLElement = Element;
extern class BrowserChannel {
static function __init__(): Void {
        untyped __js__("goog.require('goog.net.BrowserChannel')");
      }
public function new( clientVersion:String):Void;
 public function getChannelDebug():Dynamic;
 public function setChannelDebug( channelDebug:Dynamic):Void;
static public function setStartThreadExecutionHook( startHook:Dynamic):Void;
static public function setEndThreadExecutionHook( endHook:Dynamic):Void;
 public function connect( testPath:String,channelPath:String,extraParams:Dynamic,?opt_oldSessionId:String,?opt_oldArrayId:Float):Void;
 public function disconnect():Void;
 public function getSessionId():String;
 public function getExtraHeaders():Dynamic;
 public function setExtraHeaders( extraHeaders:Dynamic):Void;
 public function getHandler():Dynamic;
 public function setHandler( handler:Dynamic):Void;
 public function getAllowHostPrefix():Bool;
 public function setAllowHostPrefix( allowHostPrefix:Bool):Void;
 public function isBuffered():Bool;
 public function getAllowChunkedMode():Bool;
 public function setAllowChunkedMode( allowChunkedMode:Bool):Void;
 public function sendMap( map:Dynamic):Void;
 public function setFailFast( failFast:Bool):Void;
 public function getForwardChannelMaxRetries():Float;
 public function isClosed():Bool;
 public function getState():Dynamic;
 public function getLastStatusCode():Float;
 public function getLastArrayId():Float;
 public function hasOutstandingRequests():Bool;
 public function testConnectionFinished( testChannel:Dynamic,useChunked:Bool):Void;
 public function testConnectionFailure( testChannel:Dynamic,errorCode:Dynamic):Void;
 public function testConnectionBlocked( testChannel:Dynamic):Void;
 public function onRequestData( request:Dynamic,responseText:String):Void;
 public function onRequestComplete( request:Dynamic):Void;
 public function getForwardChannelUri( path:String):Dynamic;
 public function getBackChannelUri( hostPrefix:String,path:String):Dynamic;
 public function createDataUri( hostPrefix:String,path:String,?opt_overridePort:Float):Dynamic;
 public function isActive():Bool;
static public function setTimeout( fn:Dynamic,ms:Float):Float;
static public function onStartExecution():Void;
static public function onEndExecution():Void;
static public function getStatEventTarget():Dynamic;
static public function notifyStatEvent( stat:Dynamic):Void;
static public var State:Float;
static public var FORWARD_CHANNEL_MAX_RETRIES:Float;
static public var FORWARD_CHANNEL_RETRY_TIMEOUT:Float;
static public var BACK_CHANNEL_XMHTTP_MAX_RETRIES:Float;
static public var VERSION:Float;
static public var Error:Float;
static public var Event:Dynamic;
static public var Stat:Float;
static public var MAGIC_RESPONSE_COOKIE:String;
static public var LogSaver:Dynamic;
}
