package goog;
import js.Dom;
private typedef Object = Dynamic;
private typedef Node = Dom;
private typedef Element = HtmlDom;
private typedef HTMLIFrameElement = IFrame;
private typedef Selection = Dynamic;
private typedef Range = Dynamic;
private typedef HTMLElement = Element;
extern class Uri {
static function __init__(): Void {
        untyped __js__("goog.require('goog.Uri')");
      }
public function new( ?opt_uri:Dynamic,?opt_ignoreCase:Bool):Void;
 public function toString():String;
 public function resolve( relativeUri:Dynamic):Dynamic;
 public function clone():Dynamic;
 public function getScheme():String;
 public function setScheme( newScheme:String,?opt_decode:Bool):Dynamic;
 public function hasScheme():Bool;
 public function getUserInfo():String;
 public function setUserInfo( newUserInfo:String,?opt_decode:Bool):Dynamic;
 public function hasUserInfo():Bool;
 public function getDomain():String;
 public function setDomain( newDomain:String,?opt_decode:Bool):Dynamic;
 public function hasDomain():Bool;
 public function getPort():Float;
 public function setPort( newPort:Dynamic):Dynamic;
 public function hasPort():Bool;
 public function getPath():String;
 public function setPath( newPath:String,?opt_decode:Bool):Dynamic;
 public function hasPath():Bool;
 public function hasQuery():Bool;
 public function setQueryData( queryData:Dynamic,?opt_decode:Bool):Dynamic;
 public function setQuery( newQuery:String,?opt_decode:Bool):Dynamic;
 public function getEncodedQuery():String;
 public function getDecodedQuery():String;
 public function getQueryData():Dynamic;
 public function getQuery():String;
 public function setParameterValue( key:String,value:Dynamic):Dynamic;
 public function setParameterValues( key:String,values:Dynamic):Dynamic;
 public function getParameterValues( name:String):Dynamic;
 public function getParameterValue( paramName:String):Dynamic;
 public function getFragment():String;
 public function setFragment( newFragment:String,?opt_decode:Bool):Dynamic;
 public function hasFragment():Bool;
 public function hasSameDomainAs( uri2:Dynamic):Bool;
 public function makeUnique():Dynamic;
 public function removeParameter( key:String):Dynamic;
 public function setReadOnly( isReadOnly:Bool):Void;
 public function isReadOnly():Bool;
 public function enforceReadOnly():Void;
 public function setIgnoreCase( ignoreCase:Bool):Void;
 public function getIgnoreCase():Bool;
static public function parse( uri:Dynamic,?opt_ignoreCase:Bool):Dynamic;
static public function create( ?opt_scheme:String,?opt_userInfo:String,?opt_domain:String,?opt_port:Float,?opt_path:String,?opt_query:Dynamic,?opt_fragment:String,?opt_ignoreCase:Bool):Dynamic;
static public function removeDotSegments( path:String):String;
static public function haveSameDomain( uri1String:String,uri2String:String):Bool;
static public var RANDOM_PARAM:String;
}
